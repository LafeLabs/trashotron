
## [HOME](scrolls/home)

# microscope
 
The scanning optical microscope uses the same Arduino-based controller for the XYZ stages as the [icon printer](scrolls/iconprinter), just with different code and with a smart phone microscope attachment for the xy stage and a sample holder attachment for the z stage.

# TrashScope

## [GEOMETRON/](geometron/)

This is a system for creating self-replicating media using microscopes built from trash, smart phones, and free open source art and science tools.

To build a microscope, we first need to get a kit for all the electronics parts. 

### Electronics Kit Parts

 - [3 motor controller boards from Pololu(10x3=$30)](https://www.pololu.com/product/2966)
 - [Custom printed circuit board to connect Arduino to controllers and connectors($2/ea in lots of 20 with shipping)](https://www.pcbway.com/project/shareproject/Trash_Robot_main__brain__board.html)
 - [straight 0.1 inch headers from Digikey(buy about 2 per kit at about 60 cents each)](https://www.digikey.com/en/products/detail/chip-quik-inc/HDR100IMP40M-G-V-TH/5978197)
 - [Ribbon cable from Digikey(about $8 for about 6 kits worth for about $2/kit rounding up )](https://www.digikey.com/en/products/detail/assmann-wsw-components/AWG28-20-F-1-300-R/2391636)
 - [8 buttons for controller from Digikey(about $1 for all 8)](https://www.digikey.com/en/products/detail/te-connectivity-alcoswitch-switches/FSM2JRT/529664)
 - [Cables from Digikey to connect stepper motors in DVD drive stages to circuit board(about $10 for 3 of them)](https://www.digikey.com/en/products/detail/molex/2177971043/14637940)
 - [Arduino Uno from Sparkfun($25, some off brand UNOs have power supply problems for this application, test any new board to see if it stalls out)](https://www.sparkfun.com/products/11021)
 - [9 pin socket headers](https://www.digikey.com/en/products/detail/samtec-inc/SSQ-109-03-T-S/1111949)

![](https://pcbwayfile.s3-us-west-2.amazonaws.com/web/21/02/16/1105143577771.png)

![](https://raw.githubusercontent.com/LafeLabs/geometronmagic/main/cube/uploadimages/kit.jpg)

Assemble the kit into a "brain".  

## Control Panel Geometry

[![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/symbolfeed/controller.svg)](https://raw.githubusercontent.com/LafeLabs/hypercube/main/symbolfeed/controller.svg)

![](https://raw.githubusercontent.com/LafeLabs/geometronmagic/main/cube/uploadimages/controller-outside.jpg)

## Assembled Electronics Kit Photo

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/assembledkit.jpg)

![](https://raw.githubusercontent.com/LafeLabs/geometronmagic/main/cube/uploadimages/brain-assembly.jpg)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/bottomcutout,jpg)

![](https://i.imgur.com/hz4C54Y.jpg)

![](https://i.imgur.com/hz4C54Y.jpg)

##  DVD drive cables

[Cables from Digikey to connect stepper motors in DVD drive stages to circuit board(about $10 for 3 of them)](https://www.digikey.com/en/products/detail/molex/2177971043/14637940)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/stagesraw.png)

![](https://i.imgur.com/zvVKp6T.jpg)

![](https://i.imgur.com/7KoLTuc.jpg)


## Z axis Stage Assembly


![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/zbase.jpg)

## X and Y axis stage assemblies

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/xystages.jpg)


## Cardboard assembly

Assemble cardboard cubes by first getting large numbers of self-replicating 4 inch squares.  To make one cube we need a set of either 12 or 8 side pieces and either 2 or 3 bottom pieces and 5 plain squares.  

### Side Panel Layout

[![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/symbolfeed/side.svg)](https://raw.githubusercontent.com/LafeLabs/hypercube/main/symbolfeed/side.svg)

Now cut out 3 of the bottom pieces, and stack them into a fifth glued panel. 


![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/cardboardbottom.jpg)


.svg file for laser cutter:

[![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/symbolfeed/bottom.svg)](https://raw.githubusercontent.com/LafeLabs/hypercube/main/symbolfeed/bottom.svg)

Assemble the sides into the base as shown:

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/cardboardcorner.jpg)

Cut out 4 inch squares, print on them, glue them to the panels, and hold it all together with rubber bands:

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/touchgrass.jpg)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/dandylion0.png)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/road3cubes.jpg)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/zoomcubebox.jpg)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/zoomcube2.jpg)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/zoomcube3.jpg)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/zoomcube4.jpg)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/cube-bottom-pattern.jpg)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/cube-side-pattern.jpg)

Every cube we produce in the Trash Robot Network is part of the Geometron Hypercube.  Therefore to grow the Hypercube, we produce and distribute as many cubes as we can, and always evolve the cubes to make them better over time and to solve specific problems to bring us closer to Trash Magic.


## Action Geometry Tools: Rulers and Shapes

To make geometric constructions out of cardboard trash, we use the tools of Action Geometry, which are created with the Geometron Language.  These include the ruler, which we cut from 0.2 or 0.25 inch thick neon green acrylic and the shape sets which we cut from 0.1 or 0.125 inch thick neon green acrylic.  

### Geometron Ruler

The Geometron Ruler is one inch by six inches. One side has tenths and the other halves, quarters and eights. The highest quality rulers are made from quarter inch neon green acrylic with a laser cutter.  Any ruler can be used to make more rulers.  Cereal box cardboard is a good material.  Find a maker space or individual with a laser cutter.  Dig through the waste bin to find extra acrylic.  Place the outlines and etch and make rulers.  Give them away and spread the word of Geometron, Trash Magic, Trash Robot and so on.  Also you can use [Ponoko.com](https://www.ponoko.com/) to get large numbers of rulers made and can sell those if you so choose.  

Using Ponoko.com is only cost effective if you have a budget of over 1000 dollars, then the cost per ruler can drop to about a dollar and a half.  Also, Ponoko only has eighth inch acrylic and quarter inch is the nicest.  For best results, go find 0.2 inch or quarter inch neon green acrylic somewhere, find a laser cutter and print these out yourself.  All the files for this are below.  

This is some 6 inch rulers from both green and yellow acrylic and a 15 cm metric ruler.

![](https://raw.githubusercontent.com/LafeLabs/geometronmagic/main/cube/uploadimages/rulers-photo.jpg)

Ruler Outline SVG file:

[![](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruleroutline.svg)](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruleroutline.svg)

Ruler Etch pattern PNG file:  

[![](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruleretch.png)](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruleretch.png)

Ruler 2 color SVG file for Ponoko.com:

[![](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler2color.svg)](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler2color.svg)


Set of 8 rulers in one SVG file for Ponoko.com:

[![](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/rulers8.svg)](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/rulers8.svg)

Centimeters PNG file for etch.  Print out with 15 centimeter width and 2 cm height:

[![](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler-cm-etch.png)](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler-cm-etch.png)

centimeters Ruler Outline SVG file, line up with etch and make 15x2 cm:

[![](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler-cm-outline.svg)](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler-cm-outline.svg)

One ruler with etch and cut in different layers:

[![](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler-cm.svg)](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler-cm.svg)

Set of 8 cm rulers in one SVG file for Ponoko.com:

[![](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler-cm-array.svg)](https://raw.githubusercontent.com/LafeLabs/pibrary/main/factory/rulerimageset/uploadimages/ruler-cm-array.svg)

## Shapes

These shapes are used for constructions based on fundamental symmetries: fourfold, eightfold, threefold, fivefold, and sixfold.  For best results, we cut them out from eight inch neon green acrylic with a laser cutter.

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/shapes.jpg)

![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/uploadimages/shapes2.jpg)
 
.svg file for use in laser cutter.  Each shape has side of 3 inches, so this is a 6 inch wide file:

[![](https://raw.githubusercontent.com/LafeLabs/hypercube/main/symbolfeed/shapes.svg)](https://raw.githubusercontent.com/LafeLabs/hypercube/main/symbolfeed/shapes.svg)

These can all also be constructed using the tools of classical geometry(compass and ruler) or a ruler and a protractor.  So they can be made by hand and cut out from cardboard or paper trash if no laser or acrylic is available.


## Phone Microscope

After building the robot, we create the phone microscope, which is an adapter between a [clip-on microscope from Amazon](https://www.amazon.com/dp/B08FWZQB4R) and the trash robot xy stage.

[insert photo here with dimensions and phone in the bed]

## Trajectory and code

The code to program the trajectory is as follows:


```
char Glyph[] = "G";

int delayus = 2000;//delayMicroseconds(delayus); for each step, 2 ms for 1 step is about 2 ms for 20 microns or 10 microns per ms

int unit = 212;//53 steps = 1 mm, 1 step = 18.9 microns, unit of 106 is 2 mm, 212 is 4 mm

int side = unit;

//these are the pin numbers of the buttons on the controller.  Connect to ground to activate.
int xleftPin = 10;
int xrightPin = 7;
int yawayPin = 9;
int ytowardsPin = 8;
int zdownPin = 11;
int zupPin = 12;

int goPin = 6;
int stopPin = 5;

//connect these pins to the MP6500 stepper motor control board:
int dirPin3 = 19;
int stepPin3 = 18;
int enPin3 = 17;
int dirPin1 = 16;
int stepPin1 = 15;

int enPin1 = 13;

int dirPin2 = 2;
int stepPin2 = 3;
int enPin2 = 4;

boolean xleftBool = false;
boolean xrightBool = false;
boolean yawayBool = false;
boolean ytowardsBool = false;
boolean zdownBool = false;
boolean zupBool = false;
boolean goBool = false;
boolean stopBool = false;

int select = 0;

void setup() {

    pinMode(xleftPin,INPUT_PULLUP); 
    pinMode(xrightPin,INPUT_PULLUP); 
    pinMode(yawayPin,INPUT_PULLUP); 
    pinMode(ytowardsPin,INPUT_PULLUP); 
    pinMode(zdownPin,INPUT_PULLUP); 
    pinMode(zupPin,INPUT_PULLUP); 
    pinMode(goPin,INPUT_PULLUP); 
    pinMode(stopPin,INPUT_PULLUP); 

    pinMode(dirPin1,OUTPUT);
    pinMode(stepPin1,OUTPUT);
    pinMode(enPin1,OUTPUT);
    pinMode(dirPin2,OUTPUT);
    pinMode(stepPin2,OUTPUT);
    pinMode(enPin2,OUTPUT);
    pinMode(dirPin3,OUTPUT);
    pinMode(stepPin3,OUTPUT);
    pinMode(enPin3,OUTPUT);

    digitalWrite(dirPin1,LOW);
    digitalWrite(stepPin1,LOW);
    digitalWrite(enPin1,HIGH);
    digitalWrite(dirPin2,LOW);
    digitalWrite(stepPin2,LOW);
    digitalWrite(enPin2,HIGH);
    digitalWrite(dirPin3,LOW);
    digitalWrite(stepPin3,LOW);
    digitalWrite(enPin3,HIGH);
    
    Serial.begin(9600);

}

void loop() { 
  
  
  xleftBool = !digitalRead(xleftPin);
  xrightBool = !digitalRead(xrightPin);
  yawayBool = !digitalRead(yawayPin);
  ytowardsBool = !digitalRead(ytowardsPin);
  zdownBool = !digitalRead(zdownPin);
  zupBool = !digitalRead(zupPin);
  goBool = !digitalRead(goPin);
  stopBool = !digitalRead(stopPin);
  
   //Serial.println(goBool); 
  if(goBool){
      printGlyph(Glyph); 
  }

  if(xleftBool){
     moveLeft(1);
  }
  if(xrightBool){
     moveRight(1);
  }
  if(zdownBool){
    moveUp(1); 
  }
  if(zupBool){
    moveDown(1); 
  }
  if(yawayBool){
    moveAway(1);
  }
  if(ytowardsBool){
    moveTowards(1);
 }
}

void moveLeft(int nSteps){
     digitalWrite(dirPin1,LOW);
     digitalWrite(enPin1,LOW);
     
     for(int index = 0;index < nSteps;index++){
       digitalWrite(stepPin1,HIGH);
       delayMicroseconds(delayus); 
       digitalWrite(stepPin1,LOW);
       delayMicroseconds(delayus); 

     }          
     digitalWrite(enPin1,HIGH);   
     digitalWrite(enPin2,HIGH);   
}

void moveRight(int nSteps){
     digitalWrite(dirPin1,HIGH);
     digitalWrite(enPin1,LOW);
    
     for(int index = 0;index < nSteps;index++){
       digitalWrite(stepPin1,HIGH);
       delayMicroseconds(delayus); 
       digitalWrite(stepPin1,LOW);
       delayMicroseconds(delayus); 

     }          
     digitalWrite(enPin1,HIGH);   
     digitalWrite(enPin3,HIGH);   

}

void moveDown(int nSteps){
     digitalWrite(dirPin3,HIGH);
     digitalWrite(enPin3,LOW);
     
     for(int index = 0;index < nSteps;index++){
       digitalWrite(stepPin3,HIGH);
       delayMicroseconds(delayus); 
       digitalWrite(stepPin3,LOW);
       delayMicroseconds(delayus); 
     }          
     digitalWrite(enPin1,HIGH);   
     digitalWrite(enPin3,HIGH);   

}

void moveUp(int nSteps){
     digitalWrite(dirPin3,LOW);
     digitalWrite(enPin3,LOW);     
     for(int index = 0;index < nSteps;index++){
       digitalWrite(stepPin3,HIGH);
       delayMicroseconds(delayus); 
       digitalWrite(stepPin3,LOW);
       delayMicroseconds(delayus); 
     }          
     digitalWrite(enPin3,HIGH);    
     digitalWrite(enPin1,HIGH);

}

void moveAway(int nSteps){
     digitalWrite(dirPin2,LOW);
     digitalWrite(enPin2,LOW);
     
     for(int index = 0;index < nSteps;index++){
       digitalWrite(stepPin2,HIGH);
       delayMicroseconds(delayus); 
       digitalWrite(stepPin2,LOW);
       delayMicroseconds(delayus); 
     }          
     digitalWrite(enPin2,HIGH);   
}

void moveTowards(int nSteps){
     digitalWrite(dirPin2,HIGH);
     digitalWrite(enPin2,LOW);
     
     for(int index = 0;index < nSteps;index++){
       digitalWrite(stepPin2,HIGH);
       delayMicroseconds(delayus); 
       digitalWrite(stepPin2,LOW);
       delayMicroseconds(delayus); 
     }          
     digitalWrite(enPin2,HIGH);   
}


void geometronAction(char action){
  stopBool = !digitalRead(stopPin);
  if(stopBool){
    delay(500);
    while(true){
      if(!digitalRead(goPin)){
        stopBool = false;
        break;
      }
      if(!digitalRead(stopPin)){
        break;
      }
      xleftBool = !digitalRead(xleftPin);
      xrightBool = !digitalRead(xrightPin);
      yawayBool = !digitalRead(yawayPin);
      ytowardsBool = !digitalRead(ytowardsPin);
      zdownBool = !digitalRead(zdownPin);
      zupBool = !digitalRead(zupPin);
      if(xleftBool){
         moveLeft(1);
      }
      if(xrightBool){
         moveRight(1);
      }
      if(zdownBool){
        moveUp(1); 
      }
      if(zupBool){
        moveDown(1); 
      }
      if(yawayBool){
        moveAway(1);
      }
      if(ytowardsBool){
        moveTowards(1);
      }
      
    }
  }
  if(action == 'a'){
     moveRight(side);
  }
  if(action == 'b'){
     moveLeft(side);
  }
  if(action == 'c'){
    moveAway(side);
  }
  if(action == 'd'){
    moveTowards(side);
  }
  if(action == 'e'){
    moveUp(side);
  }
  if(action == 'f'){
    moveDown(side);
  }
  if(action == 'g'){
    side /= 2;
  }
  if(action == 'h'){
    side *= 2;
  }
  if(action == 'A'){
    geometronSequence("efa");//4 mm up and 4 mm down, then move 4 mm right
  }
  if(action == 'B'){
    geometronSequence("efb");//4 mm up 4 mm down, then 4 mm left 
  }
  if(action == 'C'){
    geometronSequence("efc");//4 mm up, 4 mm down, then 4 mm away
  }
  if(action == 'D'){
    geometronSequence("efd");//4 mm up, 4 mm down, 4 mm towards
  }
  if(action == 'E'){
    geometronSequence("AAAACBBBBCAAAACBBBBCAAAADdddbbbb");//create array of 5x5 pixels with z stacks
  }
  if(action == 'F'){
    geometronSequence("EEEEEEEEEE");//10 scans
  }
  if(action == 'G'){
    geometronSequence("FFFFFFFFFF");//100 scans
  }
  if(action == 'H'){
    geometronSequence("GGGGGGGGGG");//1000 scans
  }
}


void printGlyph(char localGlyph[]){
  side=unit;
   for(int index = 0;index <= sizeof(Glyph);index++){
    if(!stopBool){
      geometronAction(localGlyph[index]);    
    }
   }  
}


void geometronSequence(String glyph){
  //for loop thru the String
  int index = 0;
  for(index = 0;index < glyph.length();index++){
    if(!stopBool){
      geometronAction(glyph.charAt(index));      
    }
   }
}
```

The trajectory is a sequence of discrete geometric movements programmed using the hardware-independent geometric language of Geometron.

# trashScope GEOMETRON Trajectory

We move the stage in an array on a 4 mm grid in the x,y and z axes using the Trash Robot DVD stage system.  Geometric actions are programmed with the Geometron purely geometric programming language.  The trajectory is an JSON array which can then be imported into the Python program which fits the data in the video of the microscope to create a 3d point cloud and import it into Blender.

![](geometron/symbolfeed/stepmovespell.svg)

![](geometron/symbolfeed/spellscan.svg)

![](geometron/symbolfeed/scan.svg)

Use the JSON link below to see the trajectory of points which are linked by quasi-continuous motion of stepper motors.  All times are in milliseconds and all positions are relative and are in millimeters.

### [geometron/data/trajectory.txt](geometron/data/trajectory.txt)

### [Example of a tiktok video of one scan](https://www.tiktok.com/@trash_robot/video/7198655892819135786)

## Software and Art Research Tasks:

1. Develop a python framework to convert uploaded or downloaded videos from social media with some shaking and blurriness into a  combined high depth of field and large field of view 2d bitmap image. 
2. develop a python framework to convert the above data along with position metadata from the JSON and some more fitting of points into a 3d color/intensity point cloud and import that into blender 
3. use known 3d structures on circuit boards and imported 3d structures from real boards to calibrate the system in real units, tweak the algorithm
4. convert long sequences of scans into timelapse combined 2d video images 
5. convert long sequences of scans into 4d point clouds in Blender
6. create a social network linking Blender artists with scientists who send data to them and artists who they work with to produce media content in the form of videos, games, virtual reality and mixed reality which can be used to create viral media which replicate the whole system including the mircoscope
7. link this social network with other sources of data for visualization to create a path from the scientific community to the viral online content creator community, using that virality to facilitate replication in science and technology

## Systems to study

 - mycelium growing across trash surfaces
 - mycelium growing on circuit boards
 - mycelium growing on totally random things we find around
 - watch snow and ice and dirt melt over time


